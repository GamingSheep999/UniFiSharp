name: Release and Publish Binary Artifacts

on:
  push:
    tags:
      - 'v*'
  workflow_dispatch:

jobs:

  release:
    name: Create GitHub Release
    runs-on: ubuntu-latest
    
    outputs:
      upload_url: ${{ steps.create_release.outputs.upload_url }}
      version: ${{ steps.get_version.outputs.version }}
      vnum: ${{ steps.get_version.outputs.vnum }}
    
    steps:
    - name: Get version from tag
      id: get_version
      run: |
        echo ::set-output name=VERSION::${GITHUB_REF/refs\/tags\//}
        echo ::set-output name=VNUM::$(echo ${GITHUB_REF/refs\/tags\//} | cut -c 2-)
      
    - name: Create Release
      uses: actions/create-release@v1
      id: create_release
      with:
        draft: true
        prerelease: false
        release_name: ${{ steps.get_version.outputs.version }}
        tag_name: ${{ steps.get_version.outputs.version }}
      env:
        GITHUB_TOKEN: ${{ github.token }}
        
  #####

  publish:
    name: Publish Artifact
    needs: release
    runs-on: ubuntu-latest
    
    strategy:
      fail-fast: false
      matrix:
        target: ['win-x64', 'win-x86', 'win-arm', 'linux-x64', 'linux-arm', 'nuget' ]

    steps:
    - name: Set publish directory
      id: pubdir
      run: echo ::set-output name=output::./UniFiSharp.CLI/bin/Release/net6.0/${{ matrix.target }}/publish/
    
    # Configure Agent
    - uses: actions/checkout@v2
    - name: Setup .NET
      uses: actions/setup-dotnet@v1
      with:
        dotnet-version: 6.0.x
        
    # Build/Publish Artifact
    - name: Restore dependencies
      run: dotnet restore
    - name: Build
      run: dotnet build -c Release --no-restore
    - name: Publish
      if: ${{ matrix.target != 'nuget' }}
      run: dotnet publish -c Release -r ${{ matrix.target }} --self-contained /p:PublishSingleFile=true /p:PublishTrimmed=true /p:EnableCompressionInSingleFile=true
      working-directory: ./UniFiSharp.CLI
    
    # Compress Artifact
    - name: Compress (TGZ)
      if: ${{ startsWith(matrix.target, 'linux-') }}
      run: tar -zcvf ${{ steps.pubdir.outputs.output }}/unifi-cli_${{ matrix.target }}.tgz -C ${{ steps.pubdir.outputs.output }} unifi-cli
      
    - name: Compress (ZIP)
      if: ${{ startsWith(matrix.target, 'win-') }}
      run: zip -Dj ${{ steps.pubdir.outputs.output }}/unifi-cli_${{ matrix.target }}.zip ${{ steps.pubdir.outputs.output }}/unifi-cli.exe
    
    # Upload Artifact
    - name: Upload Artifact (ZIP)
      uses: actions/upload-release-asset@v1
      if: ${{ startsWith(matrix.target, 'win-') }}
      env:
        GITHUB_TOKEN: ${{ github.token }}
      with:
        upload_url: ${{ needs.release.outputs.upload_url }}
        asset_path: ${{ steps.pubdir.outputs.output }}/unifi-cli_${{ matrix.target }}.zip
        asset_name: unifi-cli_${{ needs.release.outputs.version }}_${{ matrix.target }}.zip
        asset_content_type: application/zip
        
    - name: Upload Artifact (TGZ)
      uses: actions/upload-release-asset@v1
      if: ${{ startsWith(matrix.target, 'linux-') }}
      env:
        GITHUB_TOKEN: ${{ github.token }}
      with:
        upload_url: ${{ needs.release.outputs.upload_url }}
        asset_path: ${{ steps.pubdir.outputs.output }}/unifi-cli_${{ matrix.target }}.tgz
        asset_name: unifi-cli_${{ needs.release.outputs.version }}_${{ matrix.target }}.tgz
        asset_content_type: application/gzip
        
    - name: Upload Artifact (Nuget)
      uses: actions/upload-release-asset@v1
      if: ${{ startsWith(matrix.target, 'nuget') }}
      env:
        GITHUB_TOKEN: ${{ github.token }}
      with:
        upload_url: ${{ needs.release.outputs.upload_url }}
        asset_path: ./UniFiSharp/bin/Release/UniFiSharp.${{ needs.release.outputs.vnum }}.nupkg
        asset_name: UniFiSharp.${{ needs.release.outputs.vnum }}.nupkg
        asset_content_type: application/octet-stream
